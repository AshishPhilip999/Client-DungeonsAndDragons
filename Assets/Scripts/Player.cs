// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Player.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DnD.Player {

  /// <summary>Holder for reflection information generated from Player.proto</summary>
  public static partial class PlayerReflection {

    #region Descriptor
    /// <summary>File descriptor for Player.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlayerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxQbGF5ZXIucHJvdG8SCkRuRC5QbGF5ZXIaDVRlcnJhaW4ucHJvdG8inQEK",
            "BlBsYXllchIMCgRwb3NYGAEgASgCEgwKBHBvc1kYAiABKAISFAoMdmlld0Rp",
            "c3RhbmNlGAMgASgFEhoKEmN1cnJlbnRUZXJyYWluUG9zWBgEIAEoAhIaChJj",
            "dXJyZW50VGVycmFpblBvc1kYBSABKAISKQoLdGVycmFpbkRhdGEYBiADKAsy",
            "FC5EbmQuVGVycmFpbi5UZXJyYWluQh4KCkRuRC5QbGF5ZXJCEFBsYXllck91",
            "dGVyQ2xhc3NiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Dnd.Terrain.TerrainReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DnD.Player.Player), global::DnD.Player.Player.Parser, new[]{ "PosX", "PosY", "ViewDistance", "CurrentTerrainPosX", "CurrentTerrainPosY", "TerrainData" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Player : pb::IMessage<Player> {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DnD.Player.PlayerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      posX_ = other.posX_;
      posY_ = other.posY_;
      viewDistance_ = other.viewDistance_;
      currentTerrainPosX_ = other.currentTerrainPosX_;
      currentTerrainPosY_ = other.currentTerrainPosY_;
      terrainData_ = other.terrainData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "posX" field.</summary>
    public const int PosXFieldNumber = 1;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "posY" field.</summary>
    public const int PosYFieldNumber = 2;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "viewDistance" field.</summary>
    public const int ViewDistanceFieldNumber = 3;
    private int viewDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ViewDistance {
      get { return viewDistance_; }
      set {
        viewDistance_ = value;
      }
    }

    /// <summary>Field number for the "currentTerrainPosX" field.</summary>
    public const int CurrentTerrainPosXFieldNumber = 4;
    private float currentTerrainPosX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CurrentTerrainPosX {
      get { return currentTerrainPosX_; }
      set {
        currentTerrainPosX_ = value;
      }
    }

    /// <summary>Field number for the "currentTerrainPosY" field.</summary>
    public const int CurrentTerrainPosYFieldNumber = 5;
    private float currentTerrainPosY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CurrentTerrainPosY {
      get { return currentTerrainPosY_; }
      set {
        currentTerrainPosY_ = value;
      }
    }

    /// <summary>Field number for the "terrainData" field.</summary>
    public const int TerrainDataFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Dnd.Terrain.Terrain> _repeated_terrainData_codec
        = pb::FieldCodec.ForMessage(50, global::Dnd.Terrain.Terrain.Parser);
    private readonly pbc::RepeatedField<global::Dnd.Terrain.Terrain> terrainData_ = new pbc::RepeatedField<global::Dnd.Terrain.Terrain>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dnd.Terrain.Terrain> TerrainData {
      get { return terrainData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
      if (ViewDistance != other.ViewDistance) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CurrentTerrainPosX, other.CurrentTerrainPosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CurrentTerrainPosY, other.CurrentTerrainPosY)) return false;
      if(!terrainData_.Equals(other.terrainData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
      if (ViewDistance != 0) hash ^= ViewDistance.GetHashCode();
      if (CurrentTerrainPosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CurrentTerrainPosX);
      if (CurrentTerrainPosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CurrentTerrainPosY);
      hash ^= terrainData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PosX != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PosY);
      }
      if (ViewDistance != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ViewDistance);
      }
      if (CurrentTerrainPosX != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(CurrentTerrainPosX);
      }
      if (CurrentTerrainPosY != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(CurrentTerrainPosY);
      }
      terrainData_.WriteTo(output, _repeated_terrainData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (ViewDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ViewDistance);
      }
      if (CurrentTerrainPosX != 0F) {
        size += 1 + 4;
      }
      if (CurrentTerrainPosY != 0F) {
        size += 1 + 4;
      }
      size += terrainData_.CalculateSize(_repeated_terrainData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.ViewDistance != 0) {
        ViewDistance = other.ViewDistance;
      }
      if (other.CurrentTerrainPosX != 0F) {
        CurrentTerrainPosX = other.CurrentTerrainPosX;
      }
      if (other.CurrentTerrainPosY != 0F) {
        CurrentTerrainPosY = other.CurrentTerrainPosY;
      }
      terrainData_.Add(other.terrainData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            PosX = input.ReadFloat();
            break;
          }
          case 21: {
            PosY = input.ReadFloat();
            break;
          }
          case 24: {
            ViewDistance = input.ReadInt32();
            break;
          }
          case 37: {
            CurrentTerrainPosX = input.ReadFloat();
            break;
          }
          case 45: {
            CurrentTerrainPosY = input.ReadFloat();
            break;
          }
          case 50: {
            terrainData_.AddEntriesFrom(input, _repeated_terrainData_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
