// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Client.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DnD.Service {

  /// <summary>Holder for reflection information generated from Client.proto</summary>
  public static partial class ClientReflection {

    #region Descriptor
    /// <summary>File descriptor for Client.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClientReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxDbGllbnQucHJvdG8SC0RuRC5zZXJ2aWNlGgxQbGF5ZXIucHJvdG8iaAoG",
            "Q2xpZW50EhIKCnBvcnROdW1iZXIYASABKAUSFAoMbG9jYWxBZGRyZXNzGAIg",
            "ASgJEhAKCGNsaWVudElEGAMgASgJEiIKBnBsYXllchgEIAEoCzISLkRuRC5Q",
            "bGF5ZXIuUGxheWVyYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::DnD.Player.PlayerReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DnD.Service.Client), global::DnD.Service.Client.Parser, new[]{ "PortNumber", "LocalAddress", "ClientID", "Player" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Client : pb::IMessage<Client> {
    private static readonly pb::MessageParser<Client> _parser = new pb::MessageParser<Client>(() => new Client());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Client> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DnD.Service.ClientReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Client() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Client(Client other) : this() {
      portNumber_ = other.portNumber_;
      localAddress_ = other.localAddress_;
      clientID_ = other.clientID_;
      player_ = other.player_ != null ? other.player_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Client Clone() {
      return new Client(this);
    }

    /// <summary>Field number for the "portNumber" field.</summary>
    public const int PortNumberFieldNumber = 1;
    private int portNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PortNumber {
      get { return portNumber_; }
      set {
        portNumber_ = value;
      }
    }

    /// <summary>Field number for the "localAddress" field.</summary>
    public const int LocalAddressFieldNumber = 2;
    private string localAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocalAddress {
      get { return localAddress_; }
      set {
        localAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientID" field.</summary>
    public const int ClientIDFieldNumber = 3;
    private string clientID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientID {
      get { return clientID_; }
      set {
        clientID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 4;
    private global::DnD.Player.Player player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DnD.Player.Player Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Client);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Client other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PortNumber != other.PortNumber) return false;
      if (LocalAddress != other.LocalAddress) return false;
      if (ClientID != other.ClientID) return false;
      if (!object.Equals(Player, other.Player)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PortNumber != 0) hash ^= PortNumber.GetHashCode();
      if (LocalAddress.Length != 0) hash ^= LocalAddress.GetHashCode();
      if (ClientID.Length != 0) hash ^= ClientID.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PortNumber != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PortNumber);
      }
      if (LocalAddress.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LocalAddress);
      }
      if (ClientID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClientID);
      }
      if (player_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PortNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PortNumber);
      }
      if (LocalAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocalAddress);
      }
      if (ClientID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientID);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Client other) {
      if (other == null) {
        return;
      }
      if (other.PortNumber != 0) {
        PortNumber = other.PortNumber;
      }
      if (other.LocalAddress.Length != 0) {
        LocalAddress = other.LocalAddress;
      }
      if (other.ClientID.Length != 0) {
        ClientID = other.ClientID;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          Player = new global::DnD.Player.Player();
        }
        Player.MergeFrom(other.Player);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PortNumber = input.ReadInt32();
            break;
          }
          case 18: {
            LocalAddress = input.ReadString();
            break;
          }
          case 26: {
            ClientID = input.ReadString();
            break;
          }
          case 34: {
            if (player_ == null) {
              Player = new global::DnD.Player.Player();
            }
            input.ReadMessage(Player);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
