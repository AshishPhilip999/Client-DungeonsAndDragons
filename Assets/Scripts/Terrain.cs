// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Terrain.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Dnd.Terrain {

  /// <summary>Holder for reflection information generated from Terrain.proto</summary>
  public static partial class TerrainReflection {

    #region Descriptor
    /// <summary>File descriptor for Terrain.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TerrainReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1UZXJyYWluLnByb3RvEgtEbmQuVGVycmFpbhoKVGlsZS5wcm90byJfCgdU",
            "ZXJyYWluEgwKBHBvc1gYASABKAISDAoEcG9zWRgCIAEoAhITCgt0ZXJyYWlu",
            "U2l6ZRgDIAEoBRIjCgh0aWxlRGF0YRgEIAMoCzIRLkRuZC5UZXJyYWluLlRp",
            "bGVCIAoLRG5ELlRlcnJhaW5CEVRlcnJhaW5PdXRlckNsYXNzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Dnd.Terrain.TileReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Dnd.Terrain.Terrain), global::Dnd.Terrain.Terrain.Parser, new[]{ "PosX", "PosY", "TerrainSize", "TileData" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Terrain : pb::IMessage<Terrain> {
    private static readonly pb::MessageParser<Terrain> _parser = new pb::MessageParser<Terrain>(() => new Terrain());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Terrain> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dnd.Terrain.TerrainReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Terrain() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Terrain(Terrain other) : this() {
      posX_ = other.posX_;
      posY_ = other.posY_;
      terrainSize_ = other.terrainSize_;
      tileData_ = other.tileData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Terrain Clone() {
      return new Terrain(this);
    }

    /// <summary>Field number for the "posX" field.</summary>
    public const int PosXFieldNumber = 1;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "posY" field.</summary>
    public const int PosYFieldNumber = 2;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "terrainSize" field.</summary>
    public const int TerrainSizeFieldNumber = 3;
    private int terrainSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TerrainSize {
      get { return terrainSize_; }
      set {
        terrainSize_ = value;
      }
    }

    /// <summary>Field number for the "tileData" field.</summary>
    public const int TileDataFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Dnd.Terrain.Tile> _repeated_tileData_codec
        = pb::FieldCodec.ForMessage(34, global::Dnd.Terrain.Tile.Parser);
    private readonly pbc::RepeatedField<global::Dnd.Terrain.Tile> tileData_ = new pbc::RepeatedField<global::Dnd.Terrain.Tile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dnd.Terrain.Tile> TileData {
      get { return tileData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Terrain);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Terrain other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
      if (TerrainSize != other.TerrainSize) return false;
      if(!tileData_.Equals(other.tileData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
      if (TerrainSize != 0) hash ^= TerrainSize.GetHashCode();
      hash ^= tileData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PosX != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PosY);
      }
      if (TerrainSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TerrainSize);
      }
      tileData_.WriteTo(output, _repeated_tileData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (TerrainSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TerrainSize);
      }
      size += tileData_.CalculateSize(_repeated_tileData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Terrain other) {
      if (other == null) {
        return;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.TerrainSize != 0) {
        TerrainSize = other.TerrainSize;
      }
      tileData_.Add(other.tileData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            PosX = input.ReadFloat();
            break;
          }
          case 21: {
            PosY = input.ReadFloat();
            break;
          }
          case 24: {
            TerrainSize = input.ReadInt32();
            break;
          }
          case 34: {
            tileData_.AddEntriesFrom(input, _repeated_tileData_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
