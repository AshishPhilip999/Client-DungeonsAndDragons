// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: TileItemData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DnD.Terrain {

  /// <summary>Holder for reflection information generated from TileItemData.proto</summary>
  public static partial class TileItemDataReflection {

    #region Descriptor
    /// <summary>File descriptor for TileItemData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TileItemDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJUaWxlSXRlbURhdGEucHJvdG8SC0RuRC5UZXJyYWluIoEBCgxUaWxlSXRl",
            "bURhdGESDAoEcG9zWBgBIAEoAhIMCgRwb3NZGAIgASgCEhMKC3RlcnJhaW5Q",
            "b3NYGAMgASgCEhMKC3RlcnJhaW5Qb3NZGAQgASgCEisKBHR5cGUYBSABKA4y",
            "HS5EbkQuVGVycmFpbi5UaWxlSXRlbURhdGFUeXBlKioKEFRpbGVJdGVtRGF0",
            "YVR5cGUSCgoGREVMRVRFEAASCgoGVVBEQVRFEAFCDQoLRG5ELlRlcnJhaW5i",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DnD.Terrain.TileItemDataType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DnD.Terrain.TileItemData), global::DnD.Terrain.TileItemData.Parser, new[]{ "PosX", "PosY", "TerrainPosX", "TerrainPosY", "Type" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum TileItemDataType {
    [pbr::OriginalName("DELETE")] Delete = 0,
    [pbr::OriginalName("UPDATE")] Update = 1,
  }

  #endregion

  #region Messages
  public sealed partial class TileItemData : pb::IMessage<TileItemData> {
    private static readonly pb::MessageParser<TileItemData> _parser = new pb::MessageParser<TileItemData>(() => new TileItemData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TileItemData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DnD.Terrain.TileItemDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileItemData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileItemData(TileItemData other) : this() {
      posX_ = other.posX_;
      posY_ = other.posY_;
      terrainPosX_ = other.terrainPosX_;
      terrainPosY_ = other.terrainPosY_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileItemData Clone() {
      return new TileItemData(this);
    }

    /// <summary>Field number for the "posX" field.</summary>
    public const int PosXFieldNumber = 1;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "posY" field.</summary>
    public const int PosYFieldNumber = 2;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "terrainPosX" field.</summary>
    public const int TerrainPosXFieldNumber = 3;
    private float terrainPosX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TerrainPosX {
      get { return terrainPosX_; }
      set {
        terrainPosX_ = value;
      }
    }

    /// <summary>Field number for the "terrainPosY" field.</summary>
    public const int TerrainPosYFieldNumber = 4;
    private float terrainPosY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TerrainPosY {
      get { return terrainPosY_; }
      set {
        terrainPosY_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::DnD.Terrain.TileItemDataType type_ = global::DnD.Terrain.TileItemDataType.Delete;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DnD.Terrain.TileItemDataType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TileItemData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TileItemData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TerrainPosX, other.TerrainPosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TerrainPosY, other.TerrainPosY)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
      if (TerrainPosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TerrainPosX);
      if (TerrainPosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TerrainPosY);
      if (Type != global::DnD.Terrain.TileItemDataType.Delete) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PosX != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PosY);
      }
      if (TerrainPosX != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(TerrainPosX);
      }
      if (TerrainPosY != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(TerrainPosY);
      }
      if (Type != global::DnD.Terrain.TileItemDataType.Delete) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (TerrainPosX != 0F) {
        size += 1 + 4;
      }
      if (TerrainPosY != 0F) {
        size += 1 + 4;
      }
      if (Type != global::DnD.Terrain.TileItemDataType.Delete) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TileItemData other) {
      if (other == null) {
        return;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.TerrainPosX != 0F) {
        TerrainPosX = other.TerrainPosX;
      }
      if (other.TerrainPosY != 0F) {
        TerrainPosY = other.TerrainPosY;
      }
      if (other.Type != global::DnD.Terrain.TileItemDataType.Delete) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            PosX = input.ReadFloat();
            break;
          }
          case 21: {
            PosY = input.ReadFloat();
            break;
          }
          case 29: {
            TerrainPosX = input.ReadFloat();
            break;
          }
          case 37: {
            TerrainPosY = input.ReadFloat();
            break;
          }
          case 40: {
            Type = (global::DnD.Terrain.TileItemDataType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
